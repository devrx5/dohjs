#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import json
import random
import string
import subprocess
import logging
from typing import Optional, Tuple, List

import requests
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
URL = "https://site.com"
TIMEOUT_SEC = 15                  # —Ç–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É
SLEEP_BETWEEN = 10                # –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã IP, —Å–µ–∫
MAX_ALLOC_RETRIES = 3             # –∫–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ allocate-static-ip –ø—Ä–∏ –ª–∏–º–∏—Ç–µ
RETRY_SLEEP_SEC = 4               # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ .env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
INSTANCE_NAME = os.getenv("INSTANCE_NAME")
REMNA_TOKEN = os.getenv("REMNA_TOKEN")
BASE_URL = os.getenv("REMNA_BASE_URL")
NODE_UUID = os.getenv("NODE_UUID")
HOST_UUIDS = os.getenv("HOST_UUIDS")
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
REGION = os.getenv("REGION")

if not all([INSTANCE_NAME, REMNA_TOKEN, BASE_URL, NODE_UUID, HOST_UUIDS]):
    sys.stderr.write("‚ùå –í .env –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã INSTANCE_NAME, REMNA_TOKEN, REMNA_BASE_URL, NODE_UUID, HOST_UUIDS\n")
    sys.exit(1)

HOST_UUIDS_LIST = [u.strip() for u in HOST_UUIDS.split(",") if u.strip()]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_FILE = "Blok.log"
logger = logging.getLogger("blok")
logger.setLevel(logging.INFO)

fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s", datefmt="%Y-%m-%d %H:%M:%S")
console_h = logging.StreamHandler(sys.stdout)
file_h = logging.FileHandler(LOG_FILE, encoding="utf-8")

console_h.setFormatter(fmt)
file_h.setFormatter(fmt)

logger.addHandler(console_h)
logger.addHandler(file_h)
logger.propagate = False


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Telegram helper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def send_telegram(message: str) -> None:
    if not BOT_TOKEN or not ADMIN_ID:
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        resp = requests.post(url, json=payload, timeout=10)
        resp.raise_for_status()
        logger.info("‚úÖ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except requests.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ AWS helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_aws(cmd: List[str]) -> Tuple[str, str, int]:
    res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return res.stdout.strip(), res.stderr.strip(), res.returncode


def generate_random_name(length: int = 10) -> str:
    return ''.join(random.choices(string.ascii_lowercase, k=length))


def find_attached_static_ip_name(instance_name: str) -> Optional[str]:
    out, err, rc = run_aws([
        "aws", "lightsail", "get-static-ips",
        "--region", REGION, "--output", "json"
    ])
    if rc != 0:
        logger.warning(f"[{REGION}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ staticIps: {err}")
        return None
    try:
        data = json.loads(out)
    except json.JSONDecodeError:
        return None
    for ip in data.get("staticIps", []):
        if ip.get("attachedTo") == instance_name:
            return ip.get("name")
    return None


def is_static_ip_limit_error(err_text: str) -> bool:
    if not err_text:
        return False
    low = err_text.lower()
    return (
        "maximum number of static ips" in low
        or "you have reached the maximum number of static ips" in low
        or ("service quotas" in low and "static ip" in low)
    )


def cleanup_static_ips_in_region(region: str) -> int:
    deleted = 0
    out, err, rc = run_aws([
        "aws", "lightsail", "get-static-ips",
        "--region", region, "--output", "json"
    ])
    if rc != 0:
        logger.warning(f"[{region}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ staticIps: {err}")
        send_telegram(f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å staticIps</b> –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}: {err}")
        return 0

    try:
        data = json.loads(out)
    except json.JSONDecodeError:
        logger.error(f"[{region}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç get-static-ips")
        send_telegram(f"‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</b> –æ—Ç get-static-ips –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}")
        return 0

    for ip_info in data.get("staticIps", []):
        if not ip_info.get("attachedTo"):
            name = ip_info.get("name")
            address = ip_info.get("ipAddress")
            _, err_rel, rc_rel = run_aws([
                "aws", "lightsail", "release-static-ip",
                "--static-ip-name", name,
                "--region", region
            ])
            if rc_rel == 0:
                deleted += 1
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Static IP: {name} ({address}) –∏–∑ {region}")
                send_telegram(f"üóëÔ∏è <b>–£–¥–∞–ª—ë–Ω Static IP</b>: {name} ({address}) –∏–∑ {region}")
            else:
                logger.error(f"[{region}] –û—à–∏–±–∫–∞ release-static-ip –¥–ª—è {name}: {err_rel}")
                send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Static IP</b> {name} ({address}) –∏–∑ {region}: {err_rel}")

    if deleted == 0:
        logger.info(f"[{region}] –ù–µ—Ç –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö Static IP –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        send_telegram(f"‚ÑπÔ∏è <b>–ù–µ—Ç –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö Static IP</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}.")
    else:
        logger.info(f"[{region}] –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {deleted} Static IP.")
        send_telegram(f"‚úÖ <b>–£–¥–∞–ª–µ–Ω–æ {deleted} Static IP</b> –≤ —Ä–µ–≥–∏–æ–Ω–µ {region}.")

    return deleted


def rotate_lightsail_ip(instance_name: str) -> dict:
    out, err, rc = run_aws([
        "aws", "lightsail", "get-instance",
        "--instance-name", instance_name,
        "--region", REGION,
        "--output", "json"
    ])
    if rc != 0:
        raise RuntimeError(f"–ò–Ω—Å—Ç–∞–Ω—Å '{instance_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–≥–∏–æ–Ω–µ {REGION}: {err}")
    try:
        instance = json.loads(out)["instance"]
    except Exception as ex:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç get-instance: {ex}")

    is_static = instance.get("isStaticIp", False)

    if is_static:
        static_name = instance.get("staticIpName") or find_attached_static_ip_name(instance_name)
        if not static_name:
            raise RuntimeError("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω, –Ω–æ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        logger.info(f"–û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ¬´{static_name}¬ª –≤ {REGION} ‚Ä¶")
        send_telegram(f"üöÄ <b>–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP</b>: {static_name} [{REGION}]")
        _, err_detach, rc_detach = run_aws([
            "aws", "lightsail", "detach-static-ip",
            "--static-ip-name", static_name,
            "--region", REGION
        ])
        if rc_detach != 0:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ detach-static-ip: {err_detach}")

        old_ip = instance.get("publicIpAddress")
        new_ip = old_ip
        for _ in range(12):  # ~6 —Å–µ–∫
            new_ip, _, _ = run_aws([
                "aws", "lightsail", "get-instance",
                "--instance-name", instance_name,
                "--region", REGION,
                "--query", "instance.publicIpAddress",
                "--output", "text"
            ])
            if new_ip and new_ip != old_ip:
                break
            time.sleep(0.5)

        if new_ip == old_ip:
            raise RuntimeError("AWS –Ω–µ –≤—ã–¥–∞–ª –Ω–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π IP (timeout).")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π IP: {new_ip}")
        send_telegram(f"‚úÖ <b>–ù–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π IP</b>: {new_ip} [{REGION}]")
        return {"status": "detached", "ip": new_ip, "static_name": static_name, "region": REGION}

    for attempt in range(1, MAX_ALLOC_RETRIES + 1):
        random_name = generate_random_name()
        logger.info(f"[{REGION}] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_ALLOC_RETRIES}: —Å–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP ¬´{random_name}¬ª ‚Ä¶")
        send_telegram(f"üöÄ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP</b> (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_ALLOC_RETRIES}): {random_name} [{REGION}]")

        _, err_alloc, rc_alloc = run_aws([
            "aws", "lightsail", "allocate-static-ip",
            "--static-ip-name", random_name,
            "--region", REGION
        ])

        if rc_alloc == 0:
            _, err_attach, rc_attach = run_aws([
                "aws", "lightsail", "attach-static-ip",
                "--static-ip-name", random_name,
                "--instance-name", instance_name,
                "--region", REGION
            ])
            if rc_attach != 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ attach-static-ip: {err_attach}. –ü–æ–ø—Ä–æ–±—É–µ–º release.")
                run_aws(["aws", "lightsail", "release-static-ip", "--static-ip-name", random_name, "--region", REGION])
                raise RuntimeError(f"–û—à–∏–±–∫–∞ attach-static-ip: {err_attach}")

            ip, err_get, rc_get = run_aws([
                "aws", "lightsail", "get-static-ip",
                "--static-ip-name", random_name,
                "--region", REGION,
                "--query", "staticIp.ipAddress",
                "--output", "text"
            ])
            if rc_get != 0 or not ip:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ get-static-ip: {err_get}")

            logger.info(f"–ü—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP {ip} (–∏–º—è {random_name}) [{REGION}]")
            send_telegram(f"‚úÖ <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω</b>: {ip} [{REGION}]")
            return {"status": "attached", "ip": ip, "static_name": random_name, "region": REGION}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞
        if is_static_ip_limit_error(err_alloc):
            logger.warning(f"[{REGION}] –õ–∏–º–∏—Ç Static IP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –û—á–∏—â–∞—é –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É.")
            send_telegram(f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç Static IP</b> –≤ {REGION}. –ß–∏—â—É –Ω–µ–ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ IP –∏ –ø–æ–≤—Ç–æ—Ä—é –ø–æ–ø—ã—Ç–∫—É.")
            freed = cleanup_static_ips_in_region(REGION)
            if freed == 0:
                logger.warning(f"[{REGION}] –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –ñ–¥—É {RETRY_SLEEP_SEC} —Å–µ–∫ –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞.")
                time.sleep(RETRY_SLEEP_SEC)
            else:
                logger.info(f"[{REGION}] –û—Å–≤–æ–±–æ–¥–∏–ª {freed} —Å–ª–æ—Ç–æ–≤. –ñ–¥—É {RETRY_SLEEP_SEC} —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è—é allocate.")
                time.sleep(RETRY_SLEEP_SEC)
            continue
        else:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ allocate-static-ip: {err_alloc}")

    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π IP –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ª–∏–º–∏—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.")


def url_is_up() -> bool:
    try:
        resp = requests.get(URL, timeout=TIMEOUT_SEC)
        return resp.status_code == 200
    except requests.RequestException as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ {URL}: {e}")
        send_telegram(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</b> –∫ {URL}: {e}")
        return False


def fetch_list(endpoint: str) -> list:
    url = f"{BASE_URL}{endpoint}"
    try:
        r = requests.get(url, headers={"Authorization": f"Bearer {REMNA_TOKEN}"}, timeout=10)
        r.raise_for_status()
        payload = r.json()
        if "response" not in payload:
            logger.error(f"–û—à–∏–±–∫–∞: –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'response'. –û—Ç–≤–µ—Ç: {payload}")
            send_telegram(f"‚ùå <b>Remna API error</b>: –Ω–µ—Ç –∫–ª—é—á–∞ 'response'. –û—Ç–≤–µ—Ç: {payload}")
            sys.exit(1)
        return payload["response"]
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {url}: {e}")
        send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ Remna API</b> –ø—Ä–∏ GET {endpoint}: {e}")
        sys.exit(1)


def patch_node(uuid: str, new_ip: str) -> None:
    url = f"{BASE_URL}/api/nodes"
    body = {"uuid": uuid, "address": new_ip}
    try:
        r = requests.patch(url, headers={"Authorization": f"Bearer {REMNA_TOKEN}"}, json=body, timeout=10)
        r.raise_for_status()
        logger.info(f"‚úÖ Node ({uuid}) IP –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí {new_ip}")
        send_telegram(f"‚úÖ <b>Node</b> ({uuid}) IP –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí {new_ip}")
    except requests.RequestException as e:
        err_text = getattr(e.response, "text", "")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PATCH /api/nodes –¥–ª—è {uuid}: {e} –û—Ç–≤–µ—Ç: {err_text}")
        send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Node</b> ({uuid}): {err_text}")
        sys.exit(1)


def patch_host(uuid: str, new_ip: str) -> None:
    url = f"{BASE_URL}/api/hosts"
    body = {"uuid": uuid, "address": new_ip}
    try:
        r = requests.patch(url, headers={"Authorization": f"Bearer {REMNA_TOKEN}"}, json=body, timeout=10)
        r.raise_for_status()
        logger.info(f"‚úÖ Host ({uuid}) IP –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí {new_ip}")
        send_telegram(f"‚úÖ <b>Host</b> ({uuid}) IP –æ–±–Ω–æ–≤–ª—ë–Ω ‚Üí {new_ip}")
    except requests.RequestException as e:
        err_text = getattr(e.response, "text", "")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PATCH /api/hosts –¥–ª—è {uuid}: {e} –û—Ç–≤–µ—Ç: {err_text}")
        send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Host</b> ({uuid}): {err_text}")
        sys.exit(1)


def update_remna_ip(new_ip: str) -> None:
    nodes = fetch_list("/api/nodes")
    hosts = fetch_list("/api/hosts")

    target_node = next((n for n in nodes if n["uuid"] == NODE_UUID), None)
    if not target_node:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Node —Å UUID: {NODE_UUID}")
        send_telegram(f"‚ùå <b>Node –Ω–µ –Ω–∞–π–¥–µ–Ω</b> (UUID: {NODE_UUID})")
        return

    target_hosts = [h for h in hosts if h["uuid"] in HOST_UUIDS_LIST]
    if not target_hosts:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω Host –∏–∑ —Å–ø–∏—Å–∫–∞: {HOST_UUIDS_LIST}")
        send_telegram(f"‚ùå <b>Hosts –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b> (UUIDs: {HOST_UUIDS_LIST})")
        return

    current_node_ip = target_node["address"].strip()
    if current_node_ip != new_ip:
        patch_node(NODE_UUID, new_ip)
    else:
        logger.info(f"‚ÑπÔ∏è Node ({NODE_UUID}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP {new_ip}")
        send_telegram(f"‚ÑπÔ∏è <b>Node</b> ({NODE_UUID}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP {new_ip}")

    for h in target_hosts:
        current_host_ip = h["address"].strip()
        if current_host_ip != new_ip:
            patch_host(h["uuid"], new_ip)
        else:
            logger.info(f"‚ÑπÔ∏è Host ({h['uuid']}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP {new_ip}")
            send_telegram(f"‚ÑπÔ∏è <b>Host</b> ({h['uuid']}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP {new_ip}")

    logger.info("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Remna –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    send_telegram("üéâ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Remna –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Main Loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    attempt = 1
    last_ip = None

    while True:
        logger.info(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å {URL}")
        if url_is_up():
            logger.info("üéâ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP 200). –û–±–Ω–æ–≤–ª—è–µ–º Remna –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º.")
            if last_ip:
                update_remna_ip(last_ip)
                cleanup_static_ips_in_region(REGION)
            break
        else:
            logger.warning("–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ–Ω—É IP ‚Ä¶")
            send_telegram("‚ö†Ô∏è <b>–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>, –Ω–∞—á–∏–Ω–∞—é —Å–º–µ–Ω—É IP...")
            try:
                result = rotate_lightsail_ip(INSTANCE_NAME)
                last_ip = result["ip"]
            except RuntimeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ IP: {e}")
                send_telegram(f"‚ùå <b>–û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ IP:</b> {e}")
                sys.exit(1)

            logger.info(f"‚è≥ –ñ–¥—ë–º {SLEEP_BETWEEN} —Å–µ–∫ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ ‚Ä¶")
            time.sleep(SLEEP_BETWEEN)
            attempt += 1


if __name__ == "__main__":
    main()
